#include "huffman.h"

#include <numeric>

namespace {

#pragma pack(push)
#pragma pack(4)
// Static Huffman table by RFC7541. The byte value is an array index
static const rfc7541::huffman::huffman_code huffman_table[]{
    {0xffc00000ul, 13}, //      11111111|11000
    {0xffffb000ul, 23}, //      11111111|11111111|1011000
    {0xfffffe20ul, 28}, //      11111111|11111111|11111110|0010
    {0xfffffe30ul, 28}, //      11111111|11111111|11111110|0011
    {0xfffffe40ul, 28}, //      11111111|11111111|11111110|0100
    {0xfffffe50ul, 28}, //      11111111|11111111|11111110|0101
    {0xfffffe60ul, 28}, //      11111111|11111111|11111110|0110
    {0xfffffe70ul, 28}, //      11111111|11111111|11111110|0111
    {0xfffffe80ul, 28}, //      11111111|11111111|11111110|1000
    {0xffffea00ul, 24}, //      11111111|11111111|11101010
    {0xfffffff0ul, 30}, //     11111111|11111111|11111111|111100
    {0xfffffe90ul, 28}, //     11111111|11111111|11111110|1001
    {0xfffffea0ul, 28}, //     11111111|11111111|11111110|1010
    {0xfffffff4ul, 30}, //     11111111|11111111|11111111|111101
    {0xfffffeb0ul, 28}, //     11111111|11111111|11111110|1011
    {0xfffffec0ul, 28}, //     11111111|11111111|11111110|1100
    {0xfffffed0ul, 28}, //     11111111|11111111|11111110|1101
    {0xfffffee0ul, 28}, //     11111111|11111111|11111110|1110
    {0xfffffef0ul, 28}, //     11111111|11111111|11111110|1111
    {0xffffff00ul, 28}, //     11111111|11111111|11111111|0000
    {0xffffff10ul, 28}, //     11111111|11111111|11111111|0001
    {0xffffff20ul, 28}, //     11111111|11111111|11111111|0010
    {0xfffffff8ul, 30}, //     11111111|11111111|11111111|111110
    {0xffffff30ul, 28}, //     11111111|11111111|11111111|0011
    {0xffffff40ul, 28}, //     11111111|11111111|11111111|0100
    {0xffffff50ul, 28}, //     11111111|11111111|11111111|0101
    {0xffffff60ul, 28}, //     11111111|11111111|11111111|0110
    {0xffffff70ul, 28}, //     11111111|11111111|11111111|0111
    {0xffffff80ul, 28}, //     11111111|11111111|11111111|1000
    {0xffffff90ul, 28}, //     11111111|11111111|11111111|1001
    {0xffffffa0ul, 28}, //     11111111|11111111|11111111|1010
    {0xffffffb0ul, 28}, //     11111111|11111111|11111111|1011
    {0x50000000ul, 6},  // ' ' 010100
    {0xfe000000ul, 10}, // '!' 11111110|00
    {0xfe400000ul, 10}, // '"' 11111110|01
    {0xffa00000ul, 12}, // '#' 11111111|1010
    {0xffc80000ul, 13}, // '$' 11111111|11001
    {0x54000000ul, 6},  // '%' 010101
    {0xf8000000ul, 8},  // '&' 11111000
    {0xff400000ul, 11}, // ''' 11111111|010
    {0xfe800000ul, 10}, // '(' 11111110|10
    {0xfec00000ul, 10}, // ')' 11111110|11
    {0xf9000000ul, 8},  // '*' 11111001
    {0xff600000ul, 11}, // '+' 11111111|011
    {0xfa000000ul, 8},  // ',' 11111010
    {0x58000000ul, 6},  // '-' 010110
    {0x5c000000ul, 6},  // '.' 010111
    {0x60000000ul, 6},  // '/' 011000
    {0x00000000ul, 5},  // '0' 00000
    {0x08000000ul, 5},  // '1' 00001
    {0x10000000ul, 5},  // '2' 00010
    {0x64000000ul, 6},  // '3' 011001
    {0x68000000ul, 6},  // '4' 011010
    {0x6c000000ul, 6},  // '5' 011011
    {0x70000000ul, 6},  // '6' 011100
    {0x74000000ul, 6},  // '7' 011101
    {0x78000000ul, 6},  // '8' 011110
    {0x7c000000ul, 6},  // '9' 011111
    {0xb8000000ul, 7},  // ':' 1011100
    {0xfb000000ul, 8},  // ';' 11111011
    {0xfff80000ul, 15}, // '<' 11111111|1111100
    {0x80000000ul, 6},  // '=' 100000
    {0xffb00000ul, 12}, // '>' 11111111|1011
    {0xff000000ul, 10}, // '?' 11111111|00
    {0xffd00000ul, 13}, // '@' 11111111|11010
    {0x84000000ul, 6},  // 'A' 100001
    {0xba000000ul, 7},  // 'B' 1011101
    {0xbc000000ul, 7},  // 'C' 1011110
    {0xbe000000ul, 7},  // 'D' 1011111
    {0xc0000000ul, 7},  // 'E' 1100000
    {0xc2000000ul, 7},  // 'F' 1100001
    {0xc4000000ul, 7},  // 'G' 1100010
    {0xc6000000ul, 7},  // 'H' 1100011
    {0xc8000000ul, 7},  // 'I' 1100100
    {0xca000000ul, 7},  // 'J' 1100101
    {0xcc000000ul, 7},  // 'K' 1100110
    {0xce000000ul, 7},  // 'L' 1100111
    {0xd0000000ul, 7},  // 'M' 1101000
    {0xd2000000ul, 7},  // 'N' 1101001
    {0xd4000000ul, 7},  // 'O' 1101010
    {0xd6000000ul, 7},  // 'P' 1101011
    {0xd8000000ul, 7},  // 'Q' 1101100
    {0xda000000ul, 7},  // 'R' 1101101
    {0xdc000000ul, 7},  // 'S' 1101110
    {0xde000000ul, 7},  // 'T' 1101111
    {0xe0000000ul, 7},  // 'U' 1110000
    {0xe2000000ul, 7},  // 'V' 1110001
    {0xe4000000ul, 7},  // 'W' 1110010
    {0xfc000000ul, 8},  // 'X' 11111100
    {0xe6000000ul, 7},  // 'Y' 1110011
    {0xfd000000ul, 8},  // 'Z' 11111101
    {0xffd80000ul, 13}, // '[' 11111111|11011
    {0xfffe0000ul, 19}, // '\' 11111111|11111110|000
    {0xffe00000ul, 13}, // ']' 11111111|11100
    {0xfff00000ul, 14}, // '^' 11111111|111100
    {0x88000000ul, 6},  // '_' 100010
    {0xfffa0000ul, 15}, // '`' 11111111|1111101
    {0x18000000ul, 5},  // 'a' 00011
    {0x8c000000ul, 6},  // 'b' 100011
    {0x20000000ul, 5},  // 'c' 00100
    {0x90000000ul, 6},  // 'd' 100100
    {0x28000000ul, 5},  // 'e' 00101
    {0x94000000ul, 6},  // 'f' 100101
    {0x98000000ul, 6},  // 'g' 100110
    {0x9c000000ul, 6},  // 'h' 100111
    {0x30000000ul, 5},  // 'i' 00110
    {0xe8000000ul, 7},  // 'j' 1110100
    {0xea000000ul, 7},  // 'k' 1110101
    {0xa0000000ul, 6},  // 'l' 101000
    {0xa4000000ul, 6},  // 'm' 101001
    {0xa8000000ul, 6},  // 'n' 101010
    {0x38000000ul, 5},  // 'o' 00111
    {0xac000000ul, 6},  // 'p' 101011
    {0xec000000ul, 7},  // 'q' 1110110
    {0xb0000000ul, 6},  // 'r' 101100
    {0x40000000ul, 5},  // 's' 01000
    {0x48000000ul, 5},  // 't' 01001
    {0xb4000000ul, 6},  // 'u' 101101
    {0xee000000ul, 7},  // 'v' 1110111
    {0xf0000000ul, 7},  // 'w' 1111000
    {0xf2000000ul, 7},  // 'x' 1111001
    {0xf4000000ul, 7},  // 'y' 1111010
    {0xf6000000ul, 7},  // 'z' 1111011
    {0xfffc0000ul, 15}, // '{' 11111111|1111110
    {0xff800000ul, 11}, // '|' 11111111|100
    {0xfff40000ul, 14}, // '}' 11111111|111101
    {0xffe80000ul, 13}, // '~' 11111111|11101
    {0xffffffc0ul, 28}, //     11111111|11111111|11111111|1100
    {0xfffe6000ul, 20}, //     11111111|11111110|0110
    {0xffff4800ul, 22}, //     11111111|11111111|010010
    {0xfffe7000ul, 20}, //     11111111|11111110|0111
    {0xfffe8000ul, 20}, //     11111111|11111110|1000
    {0xffff4c00ul, 22}, //     11111111|11111111|010011
    {0xffff5000ul, 22}, //     11111111|11111111|010100
    {0xffff5400ul, 22}, //     11111111|11111111|010101
    {0xffffb200ul, 23}, //     11111111|11111111|1011001
    {0xffff5800ul, 22}, //     11111111|11111111|010110
    {0xffffb400ul, 23}, //     11111111|11111111|1011010
    {0xffffb600ul, 23}, //     11111111|11111111|1011011
    {0xffffb800ul, 23}, //     11111111|11111111|1011100
    {0xffffba00ul, 23}, //     11111111|11111111|1011101
    {0xffffbc00ul, 23}, //     11111111|11111111|1011110
    {0xffffeb00ul, 24}, //     11111111|11111111|11101011
    {0xffffbe00ul, 23}, //     11111111|11111111|1011111
    {0xffffec00ul, 24}, //     11111111|11111111|11101100
    {0xffffed00ul, 24}, //     11111111|11111111|11101101
    {0xffff5c00ul, 22}, //     11111111|11111111|010111
    {0xffffc000ul, 23}, //     11111111|11111111|1100000
    {0xffffee00ul, 24}, //     11111111|11111111|11101110
    {0xffffc200ul, 23}, //     11111111|11111111|1100001
    {0xffffc400ul, 23}, //     11111111|11111111|1100010
    {0xffffc600ul, 23}, //     11111111|11111111|1100011
    {0xffffc800ul, 23}, //     11111111|11111111|1100100
    {0xfffee000ul, 21}, //     11111111|11111110|11100
    {0xffff6000ul, 22}, //     11111111|11111111|011000
    {0xffffca00ul, 23}, //     11111111|11111111|1100101
    {0xffff6400ul, 22}, //     11111111|11111111|011001
    {0xffffcc00ul, 23}, //     11111111|11111111|1100110
    {0xffffce00ul, 23}, //     11111111|11111111|1100111
    {0xffffef00ul, 24}, //     11111111|11111111|11101111
    {0xffff6800ul, 22}, //     11111111|11111111|011010
    {0xfffee800ul, 21}, //     11111111|11111110|11101
    {0xfffe9000ul, 20}, //     11111111|11111110|1001
    {0xffff6c00ul, 22}, //     11111111|11111111|011011
    {0xffff7000ul, 22}, //     11111111|11111111|011100
    {0xffffd000ul, 23}, //     11111111|11111111|1101000
    {0xffffd200ul, 23}, //     11111111|11111111|1101001
    {0xfffef000ul, 21}, //     11111111|11111110|11110
    {0xffffd400ul, 23}, //     11111111|11111111|1101010
    {0xffff7400ul, 22}, //     11111111|11111111|011101
    {0xffff7800ul, 22}, //     11111111|11111111|011110
    {0xfffff000ul, 24}, //     11111111|11111111|11110000
    {0xfffef800ul, 21}, //     11111111|11111110|11111
    {0xffff7c00ul, 22}, //     11111111|11111111|011111
    {0xffffd600ul, 23}, //     11111111|11111111|1101011
    {0xffffd800ul, 23}, //     11111111|11111111|1101100
    {0xffff0000ul, 21}, //     11111111|11111111|00000
    {0xffff0800ul, 21}, //     11111111|11111111|00001
    {0xffff8000ul, 22}, //     11111111|11111111|100000
    {0xffff1000ul, 21}, //     11111111|11111111|00010
    {0xffffda00ul, 23}, //     11111111|11111111|1101101
    {0xffff8400ul, 22}, //     11111111|11111111|100001
    {0xffffdc00ul, 23}, //     11111111|11111111|1101110
    {0xffffde00ul, 23}, //     11111111|11111111|1101111
    {0xfffea000ul, 20}, //     11111111|11111110|1010
    {0xffff8800ul, 22}, //     11111111|11111111|100010
    {0xffff8c00ul, 22}, //     11111111|11111111|100011
    {0xffff9000ul, 22}, //     11111111|11111111|100100
    {0xffffe000ul, 23}, //     11111111|11111111|1110000
    {0xffff9400ul, 22}, //     11111111|11111111|100101
    {0xffff9800ul, 22}, //     11111111|11111111|100110
    {0xffffe200ul, 23}, //     11111111|11111111|1110001
    {0xfffff800ul, 26}, //     11111111|11111111|11111000|00
    {0xfffff840ul, 26}, //     11111111|11111111|11111000|01
    {0xfffeb000ul, 20}, //     11111111|11111110|1011
    {0xfffe2000ul, 19}, //     11111111|11111110|001
    {0xffff9c00ul, 22}, //     11111111|11111111|100111
    {0xffffe400ul, 23}, //     11111111|11111111|1110010
    {0xffffa000ul, 22}, //     11111111|11111111|101000
    {0xfffff600ul, 25}, //     11111111|11111111|11110110|0
    {0xfffff880ul, 26}, //     11111111|11111111|11111000|10
    {0xfffff8c0ul, 26}, //     11111111|11111111|11111000|11
    {0xfffff900ul, 26}, //     11111111|11111111|11111001|00
    {0xfffffbc0ul, 27}, //     11111111|11111111|11111011|110
    {0xfffffbe0ul, 27}, //     11111111|11111111|11111011|111
    {0xfffff940ul, 26}, //     11111111|11111111|11111001|01
    {0xfffff100ul, 24}, //     11111111|11111111|11110001
    {0xfffff680ul, 25}, //     11111111|11111111|11110110|1
    {0xfffe4000ul, 19}, //     11111111|11111110|010
    {0xffff1800ul, 21}, //     11111111|11111111|00011
    {0xfffff980ul, 26}, //     11111111|11111111|11111001|10
    {0xfffffc00ul, 27}, //     11111111|11111111|11111100|000
    {0xfffffc20ul, 27}, //     11111111|11111111|11111100|001
    {0xfffff9c0ul, 26}, //     11111111|11111111|11111001|11
    {0xfffffc40ul, 27}, //     11111111|11111111|11111100|010
    {0xfffff200ul, 24}, //     11111111|11111111|11110010
    {0xffff2000ul, 21}, //     11111111|11111111|00100
    {0xffff2800ul, 21}, //     11111111|11111111|00101
    {0xfffffa00ul, 26}, //     11111111|11111111|11111010|00
    {0xfffffa40ul, 26}, //     11111111|11111111|11111010|01
    {0xffffffd0ul, 28}, //     11111111|11111111|11111111|1101
    {0xfffffc60ul, 27}, //     11111111|11111111|11111100|011
    {0xfffffc80ul, 27}, //     11111111|11111111|11111100|100
    {0xfffffca0ul, 27}, //     11111111|11111111|11111100|101
    {0xfffec000ul, 20}, //     11111111|11111110|1100
    {0xfffff300ul, 24}, //     11111111|11111111|11110011
    {0xfffed000ul, 20}, //     11111111|11111110|1101
    {0xffff3000ul, 21}, //     11111111|11111111|00110
    {0xffffa400ul, 22}, //     11111111|11111111|101001
    {0xffff3800ul, 21}, //     11111111|11111111|00111
    {0xffff4000ul, 21}, //     11111111|11111111|01000
    {0xffffe600ul, 23}, //     11111111|11111111|1110011
    {0xffffa800ul, 22}, //     11111111|11111111|101010
    {0xffffac00ul, 22}, //     11111111|11111111|101011
    {0xfffff700ul, 25}, //     11111111|11111111|11110111|0
    {0xfffff780ul, 25}, //     11111111|11111111|11110111|1
    {0xfffff400ul, 24}, //     11111111|11111111|11110100
    {0xfffff500ul, 24}, //     11111111|11111111|11110101
    {0xfffffa80ul, 26}, //     11111111|11111111|11111010|10
    {0xffffe800ul, 23}, //     11111111|11111111|1110100
    {0xfffffac0ul, 26}, //     11111111|11111111|11111010|11
    {0xfffffcc0ul, 27}, //     11111111|11111111|11111100|110
    {0xfffffb00ul, 26}, //     11111111|11111111|11111011|00
    {0xfffffb40ul, 26}, //     11111111|11111111|11111011|01
    {0xfffffce0ul, 27}, //     11111111|11111111|11111100|111
    {0xfffffd00ul, 27}, //     11111111|11111111|11111101|000
    {0xfffffd20ul, 27}, //     11111111|11111111|11111101|001
    {0xfffffd40ul, 27}, //     11111111|11111111|11111101|010
    {0xfffffd60ul, 27}, //     11111111|11111111|11111101|011
    {0xffffffe0ul, 28}, //     11111111|11111111|11111111|1110
    {0xfffffd80ul, 27}, //     11111111|11111111|11111101|100
    {0xfffffda0ul, 27}, //     11111111|11111111|11111101|101
    {0xfffffdc0ul, 27}, //     11111111|11111111|11111101|110
    {0xfffffde0ul, 27}, //     11111111|11111111|11111101|111
    {0xfffffe00ul, 27}, //     11111111|11111111|11111110|000
    {0xfffffb80ul, 26}, //     11111111|11111111|11111011|10
    {0xfffffffcul, 30}  // EOS 11111111|11111111|11111111|111111
};

#pragma pack(pop)

static const uint8_t code_len_array[] = {5,  6,  7,  8,  10, 11, 12, 13, 14, 15, 19,
                                         20, 21, 22, 23, 24, 25, 26, 27, 28, 30};

static const unsigned short asso_values[] = {
    1,   267, 267, 267, 267, 267, 267, 267, 263, 267, 267, 267, 267, 267, 267, 267, 42,  267, 267, 267, 267, 267,
    267, 267, 262, 267, 267, 267, 267, 267, 267, 267, 86,  267, 267, 267, 267, 267, 267, 267, 259, 267, 267, 267,
    267, 267, 267, 267, 170, 267, 267, 267, 267, 267, 267, 267, 258, 267, 267, 267, 267, 267, 267, 267, 22,  267,
    267, 267, 267, 267, 267, 267, 255, 267, 267, 267, 114, 267, 267, 267, 118, 267, 267, 267, 254, 267, 267, 267,
    251, 267, 267, 267, 250, 267, 267, 267, 75,  267, 267, 267, 247, 267, 267, 267, 246, 267, 267, 267, 243, 267,
    267, 267, 159, 267, 267, 267, 242, 267, 267, 267, 239, 267, 267, 267, 238, 267, 267, 267, 8,   267, 267, 267,
    235, 267, 267, 267, 234, 267, 267, 267, 231, 267, 267, 267, 144, 267, 267, 267, 230, 267, 267, 267, 227, 267,
    267, 267, 226, 267, 267, 267, 61,  267, 267, 267, 223, 267, 267, 267, 222, 267, 267, 267, 219, 267, 267, 267,
    153, 267, 111, 267, 218, 267, 110, 267, 215, 267, 214, 267, 211, 267, 210, 267, 15,  267, 207, 267, 206, 267,
    203, 267, 81,  267, 202, 267, 199, 267, 198, 267, 134, 267, 195, 267, 194, 267, 191, 267, 69,  267, 190, 267,
    187, 267, 186, 267, 54,  267, 183, 267, 182, 267, 178, 267, 164, 267, 175, 104, 139, 84,  105, 72,  128, 67,
    32,  51,  47,  35,  174, 93,  29,  101, 95,  92,  38,  66,  4,   0};

static const short int wordlist[] = {
    -1,  19,  176, 63,  48,  254, 92,  33,  28,  178, 124, 61,  8,   131, 40,  127, 147, 0,   69,  15,  224, 41,  24,
    230, 39,  115, 4,   208, 34,  22,  192, 60,  38,  215, 172, 120, 237, 200, 256, 211, 123, 88,  20,  179, 201, 50,
    222, 13,  236, 125, 121, 193, 225, 241, 249, 188, 93,  85,  17,  153, 214, 30,  198, 35,  108, 12,  184, 245, 206,
    90,  175, 91,  81,  159, 250, 26,  154, 43,  47,  6,   128, 252, 152, 36,  73,  145, 21,  216, 247, 99,  2,   195,
    244, 242, 234, 59,  218, 96,  44,  223, 255, 235, 202, 238, 42,  142, 148, 203, 118, 210, 240, 138, 135, 221, 243,
    132, 213, 219, 25,  133, 253, 32,  5,   205, 212, -1,  -1,  251, 10,  171, 94,  119, 18,  167, 220, 165, 64,  77,
    16,  226, 144, 248, 113, -1,  29,  187, 204, 100, 11,  162, -1,  -1,  246, 31,  1,   62,  114, 14,  194, 27,  164,
    -1,  54,  7,   130, 239, 126, 106, -1,  161, 23,  227, -1,  105, 3,   199, 9,   122, 107, 231, -1,  89,  207, 197,
    191, 87,  86,  183, 182, 84,  83,  180, 174, 82,  80,  168, 166, 79,  78,  158, 157, 76,  75,  155, 151, 74,  72,
    150, 149, 71,  70,  143, 141, 68,  67,  140, 139, 66,  58,  137, 233, 117, 112, 232, 228, 110, 109, 196, 190, 104,
    103, 189, 186, 102, 98,  185, 181, 95,  65,  173, 170, 57,  56,  169, 163, 55,  53,  160, 156, 52,  51,  146, 136,
    46,  45,  134, 129, 37,  116, 229, 217, 111, 101, 209, 177, 97,  49};

short int find(const uint32_t code) {
  constexpr auto MAX_HASH_VALUE = 266;

  const uint8_t *str = reinterpret_cast<const uint8_t *>(&code);
  auto key = asso_values[static_cast<unsigned char>(str[3])] + asso_values[static_cast<unsigned char>(str[2])] +
             asso_values[static_cast<unsigned char>(str[1])] + asso_values[static_cast<unsigned char>(str[0])];

  if (key <= MAX_HASH_VALUE) {
    return wordlist[key];
  }

  return -1;
}

} // namespace

namespace rfc7541 {
namespace huffman {

std::optional<uint16_t> decode(const huffman_code &code) {
  auto index = find(code.huffmanCode);
  if (index >= 0 && huffman_table[index].huffmanCode == code.huffmanCode &&
      code.bitLength == huffman_table[index].bitLength) {
    return index;
  }
  return {};
}

const huffman_code &encode(uint16_t value) { return huffman_table[value]; }

const std::span<const uint8_t> allowed_code_lengths() { return code_len_array; }

std::size_t estimate_len(std::span<const uint8_t> data) {
  auto bits = std::accumulate(std::begin(data), std::end(data), static_cast<std::size_t>(0),
                              [](auto sum, auto byte) { return sum + encode(byte).bitLength; });
  return bits;
}

} // namespace huffman
} // namespace rfc7541
